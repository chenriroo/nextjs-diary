import { useEffect, useState } from 'react'
import Head from 'next/head'
import Entry from '../components/Entry'
import Navigation from '../components/Navigation'
import Toolbar from '../components/Toolbar'
import styles from '../styles/Home.module.scss'
import formatTime from '../utils/formatTime'
import useFetchEntries from '../utils/fetcher'

export default function Home() {

	const [curDate, setCurDate] = useState({
		year: `${new Date().getFullYear()}`,
		month: `${new Date().getMonth()}` 	// Save as JS Date format: 0-11 - format in fetch
	})
	const [isFetching, entries] = useFetchEntries(curDate)
	const [curEntry, setCurEntry] = useState({})
	const [curEntries, setCurEntries] = useState(entries)
	const [menuIsOpen, setMenuIsOpen] = useState(true)
	
	function inputDate(val, type) {
		setCurDate({
			...curDate,
			[type]: val
		})
	}

	async function handleCreateEntry(day) {
		let hours = new Date().getHours();
		let minutes = new Date().getMinutes();

		const res = await fetch (`https://chenriroo-json-server-heroku.herokuapp.com/entries/`, {
			method: 'POST',
			headers: {
				'content-type': 'application/json'
			},
			body: JSON.stringify({
				date: new Date(curDate.year, curDate.month-1, day, hours, minutes),
				content: ""
			})
		})
		const data = await res.json();
		const formattedEntryObj = formatTime([data])
		setCurEntry(...formattedEntryObj)
		setCurEntries(oldArr => [...oldArr, ...formattedEntryObj])
		
	}

	function handleSelectEntry(e,entry) {
		const tag = e.target.tagName;
		if(tag === 'SPAN') {
			setCurEntry(entry)
		} else if(tag === 'SELECT') {
			const selectedID = Number(e.target.value);
			const objEntry = curEntries.filter(entry => entry.id === selectedID)
			setCurEntry(...objEntry)
		}
	}

	async function updateEntry(input) {
		const strDate = new Date(`${input.date} ${input.time}`)
		const objNewEntry = {
			date: strDate,
			content: input.content
		}

		const res = await fetch(`https://chenriroo-json-server-heroku.herokuapp.com/entries/${input.id}`, {
			method: 'PUT',
			headers: {
				'content-type': 'application/json'
			},
			body: JSON.stringify(objNewEntry)
		})
		const data = await res.json();
		const [updatedEntryObj] = formatTime([data])

		const updatedCurEntries = curEntries.map(entry => {
			if(entry.id === updatedEntryObj.id) return updatedEntryObj;
			return entry
		})

		setCurEntry(updatedEntryObj)
		setCurEntries(updatedCurEntries)

		
	}

	async function deleteEntry(id) {
		await fetch(`https://chenriroo-json-server-heroku.herokuapp.com/entries/${id}`, {
			method: 'DELETE',
		})
		setCurEntry({});
		const filteredCurEntries = curEntries.filter(entry => entry.id !== id)
		setCurEntries(filteredCurEntries)
	}

	// Update the state without fetching whenever we POST/DELETE/PUT
	useEffect(() => {
		setCurEntries(entries)
	},[entries])

	return (
		<div className={styles.container}>
			
			<Head>
				<title>Diary</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{Object.keys(curEntry).length > 0 ? 
				<Entry 
					entry={curEntry}
					updateEntry={updateEntry}
					deleteEntry={deleteEntry}
					isFetching={isFetching}
				/> : undefined }
					
			
			
			<Navigation 
				handleSelectEntry={handleSelectEntry}
				handleCreateEntry={handleCreateEntry}
				inputDate={inputDate}
				curEntries={curEntries}
				isFetching={isFetching}
				curEntry={curEntry.day}
				curDate={curDate}
				menuIsOpen={menuIsOpen}
				setMenuIsOpen={setMenuIsOpen}
			/>

			<Toolbar
				curEntries={curEntries}
				menuIsOpen={menuIsOpen}
				setMenuIsOpen={setMenuIsOpen}
			/>

			
		</div>
	)
}
