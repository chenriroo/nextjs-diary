import { useEffect, useState } from 'react'
import Head from 'next/head'
import Entry from '../components/Entry'
import Navigation from '../components/Navigation'
import Toolbar from '../components/Toolbar'
import styles from '../styles/Home.module.scss'
import formatTime from '../utils/formatTime'
import useFetchEntries from '../utils/fetcher'

export default function Home() {
	const [curDate, setCurDate] = useState({
		year: `${new Date().getFullYear()}`,
		month: `${new Date().getMonth()}` 	// Save as JS Date format: 0-11 - formatted in fetch
	})
	const [isFetching, fetchedEntries] = useFetchEntries(curDate)
	const [curDayObj, setCurDayObj] = useState({entries: []})
	const [curEntries, setCurEntries] = useState([])
	const [menuIsOpen, setMenuIsOpen] = useState(true)
	const [isMultiEntry, setIsMultiEntry] = useState(false)
	const [entriesIndex, setEntriesIndex] = useState(0);

	console.log(curDayObj)

	function inputDate(val, type) {
		setCurDate({
			...curDate,
			[type]: val
		})
	}

	async function handleCreateEntry(dayObj) {
		let hours = new Date().getHours();
		let minutes = new Date().getMinutes();

		const res = await fetch (`https://chenriroo-json-server-heroku.herokuapp.com/entries/`, {
			method: 'POST',
			headers: {
				'content-type': 'application/json'
			},
			body: JSON.stringify({
				date: new Date(curDate.year, curDate.month, dayObj.day, hours, minutes),
				content: ""
			})
		});
		const data = await res.json();
		const [newEntryObj] = formatTime([data]);

		
		const newEntriesArr = [...dayObj.entries, newEntryObj];

		// TODO
		setCurDayObj({
			day: dayObj.day, 
			type: newEntriesArr.length === 1 ? 'single' : 'multi',
			entries: newEntriesArr
		})
		setCurEntries([...curEntries, newEntryObj]);
		setEntriesIndex(newEntriesArr.length-1);
	}


	// TODO: Update to take in multi array
	async function updateEntry(input) {

		const strDate = new Date(`${input.date} ${input.time}`)
		const updatedEntry = {
			date: strDate,
			content: input.content
		}

		const res = await fetch(`https://chenriroo-json-server-heroku.herokuapp.com/entries/${input.id}`, {
			method: 'PUT',
			headers: {
				'content-type': 'application/json'
			},
			body: JSON.stringify(updatedEntry)
		})
		const data = await res.json();
		const [updatedEntryObj] = formatTime([data]) //returns single entry obj

		// TODO refactor
		// for curEntries
		const updatedCurEntries = curEntries.map(entry => {
			if(entry.id === updatedEntryObj.id) return updatedEntryObj;
			return entry
		})

		// for curDayObj
		const newArrEntries = curDayObj.entries.map(entry => {
			if(entry.id === updatedEntryObj.id) return updatedEntryObj;
			return entry
		})

		setCurEntries(updatedCurEntries)
		setCurDayObj({
			day: updatedEntryObj.day, 
			type: updatedEntryObj.type,
			entries: newArrEntries
		})
		
	}

	async function deleteEntry(id) {
		if(entriesIndex > 0) setEntriesIndex(entriesIndex-1);
		const filteredCurDayEntries = curDayObj.entries.filter(entry => entry.id !== id);
		setCurDayObj({...curDayObj, entries: filteredCurDayEntries});
		
		const filteredCurEntries = curEntries.filter(entry => entry.id !== id);
		setCurEntries(filteredCurEntries);

		await fetch(`https://chenriroo-json-server-heroku.herokuapp.com/entries/${id}`, {
			method: 'DELETE',
		});
	}

	//Update the state with fetched entries (per month month)
	useEffect(() => {
		setCurEntries(fetchedEntries)
	},[fetchedEntries, isFetching])

	return (
		<div className={styles.container}>
			
			<Head>
				<title>Diary</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{curDayObj.entries.length > 0 ? 
				<Entry 
					curDayObj={curDayObj}
					updateEntry={updateEntry}
					deleteEntry={deleteEntry}
					isMultiEntry={isMultiEntry}
					setIsMultiEntry={setIsMultiEntry}
					entriesIndex={entriesIndex}
					setEntriesIndex={setEntriesIndex}
				/> : undefined }
					
			
			
			<Navigation 
				setCurDayObj={setCurDayObj}
				handleCreateEntry={handleCreateEntry}
				inputDate={inputDate}
				curEntries={curEntries}
				isFetching={isFetching}
				curDayObj={curDayObj.day}
				curDate={curDate}
				menuIsOpen={menuIsOpen}
				setMenuIsOpen={setMenuIsOpen}
				setEntriesIndex={setEntriesIndex}
			/>

			<Toolbar
				curEntries={curEntries}
				menuIsOpen={menuIsOpen}
				setMenuIsOpen={setMenuIsOpen}
				curDayObj={curDayObj}
				isMultiEntry={isMultiEntry}
				entriesIndex={entriesIndex}
				setEntriesIndex={setEntriesIndex}
			/>

			
		</div>
	)
}
